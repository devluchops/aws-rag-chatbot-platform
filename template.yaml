AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'AWS Chatbot    Properties:
      CodeUri: lambda/
      Handler: document_processor_lambda.lambda_handler
      Runtime: python3.13
      Timeout: 300
      MemorySize: 2048verless Components (Lambda + API Gateway)'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name
  
  ProjectName:
    Type: String
    Default: aws-chatbot
    Description: Project name

Globals:
  Function:
    Timeout: 30
    MemorySize: 512
    Runtime: python3.12
    Environment:
      Variables:
        PYTHONPATH: /var/task
        ENVIRONMENT: !Ref Environment
        PROJECT_NAME: !Ref ProjectName

Resources:
  ChatbotFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/
      Handler: src.handlers.simple_handler.lambda_handler
      Runtime: python3.12
      Timeout: 30
      MemorySize: 512
      Environment:
        Variables:
          SSM_PARAMETER_PREFIX: !Sub '/chatbot/${Environment}'
          OPENSEARCH_SECRET_NAME: !Sub '${ProjectName}-${Environment}-opensearch-credentials'
      VpcConfig:
        SubnetIds:
          - !Sub '{{resolve:ssm:/chatbot/${Environment}/vpc/subnet_id_1}}'
          - !Sub '{{resolve:ssm:/chatbot/${Environment}/vpc/subnet_id_2}}'
        SecurityGroupIds:
          - !Sub '{{resolve:ssm:/chatbot/${Environment}/vpc/security_group_id}}'
      Events:
        Health:
          Type: Api
          Properties:
            RestApiId: !Ref ChatbotApi
            Path: /health
            Method: GET
        Chat:
          Type: Api
          Properties:
            RestApiId: !Ref ChatbotApi
            Path: /chat
            Method: POST
        CatchAll:
          Type: Api
          Properties:
            RestApiId: !Ref ChatbotApi
            Path: /{proxy+}
            Method: ANY
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
                - ssm:GetParameters
                - ssm:GetParametersByPath
              Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/chatbot/${Environment}/*'
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${ProjectName}-${Environment}-opensearch-credentials*'
            - Effect: Allow
              Action:
                - es:ESHttpPost
                - es:ESHttpPut
                - es:ESHttpGet
                - es:ESHttpDelete
                - es:ESHttpHead
              Resource: '*'
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
                - bedrock:InvokeModelWithResponseStream
              Resource: '*'
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
                - s3:DeleteObject
                - s3:ListBucket
              Resource: '*'

  DocumentProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/
      Handler: src.handlers.document_processor_lambda.lambda_handler
      Runtime: python3.12
      Timeout: 300
      MemorySize: 2048
      Environment:
        Variables:
          SSM_PARAMETER_PREFIX: !Sub '/chatbot/${Environment}'
          OPENSEARCH_SECRET_NAME: !Sub '${ProjectName}-${Environment}-opensearch-credentials'
      VpcConfig:
        SubnetIds:
          - !Sub '{{resolve:ssm:/chatbot/${Environment}/vpc/subnet_id_1}}'
          - !Sub '{{resolve:ssm:/chatbot/${Environment}/vpc/subnet_id_2}}'
        SecurityGroupIds:
          - !Sub '{{resolve:ssm:/chatbot/${Environment}/vpc/security_group_id}}'
      Events:
        ProcessDocument:
          Type: Api
          Properties:
            RestApiId: !Ref ChatbotApi
            Path: /process-document
            Method: POST
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
                - ssm:GetParameters
                - ssm:GetParametersByPath
              Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/chatbot/${Environment}/*'
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${ProjectName}-${Environment}-opensearch-credentials*'
            - Effect: Allow
              Action:
                - es:ESHttpPost
                - es:ESHttpPut
                - es:ESHttpGet
                - es:ESHttpDelete
                - es:ESHttpHead
              Resource: '*'
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
                - bedrock:InvokeModelWithResponseStream
              Resource: '*'
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
                - s3:DeleteObject
                - s3:ListBucket
              Resource: '*'
            - Effect: Allow
              Action:
                - textract:DetectDocumentText
                - textract:AnalyzeDocument
              Resource: '*'

  ChatbotApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-api'
      StageName: Prod
      Cors:
        AllowMethods: "'OPTIONS,POST,GET,PUT,DELETE'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      OpenApiVersion: '3.0.1'

Outputs:
  ChatbotApiUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ChatbotApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
    Export:
      Name: !Sub "${AWS::StackName}-api-url"
  
  ChatbotFunctionArn:
    Description: "Main chatbot Lambda function ARN"
    Value: !GetAtt ChatbotFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-chatbot-function-arn"
  
  DocumentProcessorFunctionArn:
    Description: "Document processor Lambda function ARN"
    Value: !GetAtt DocumentProcessorFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-document-processor-function-arn"
